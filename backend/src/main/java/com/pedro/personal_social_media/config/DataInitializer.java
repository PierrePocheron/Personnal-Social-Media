package com.pedro.personal_social_media.config;

import com.pedro.personal_social_media.event.model.Event;
import com.pedro.personal_social_media.event.model.Participation;
import com.pedro.personal_social_media.person.model.Person;
import com.pedro.personal_social_media.relation.model.Relation;
import com.pedro.personal_social_media.place.model.Place;
import com.pedro.personal_social_media.person.repository.PersonRepository;
import com.pedro.personal_social_media.event.repository.EventRepository;
import com.pedro.personal_social_media.place.repository.PlaceRepository;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.*;

@Component
@RestController
@RequestMapping("/api/init")
@CrossOrigin
public class DataInitializer {

    private final PersonRepository personRepository;
    private final EventRepository eventRepository;
    private final PlaceRepository placeRepository;

    @Value("${app.init.fake-data:false}")
    private boolean initFakeData;

    @Value("${app.me.id}")
    private UUID meId;

    public DataInitializer(PersonRepository personRepository, EventRepository eventRepository, PlaceRepository placeRepository) {
        this.personRepository = personRepository;
        this.eventRepository = eventRepository;
        this.placeRepository = placeRepository;
    }

    @PostConstruct
    public void initDataIfEmpty() {
        if (initFakeData && !personRepository.findById(meId).isPresent()) {
            generateFakeData();
        }
    }

    @GetMapping("/data")
    public String manualInitData() {
        clearDatabase();
        generateFakeData();
        return "Base de donn√©es r√©initialis√©e avec des donn√©es fictives ‚úÖ";
    }

    private void clearDatabase() {
        personRepository.deleteAll();
        eventRepository.deleteAll();
    }

    private void generateFakeData() {
        // --- PLACES ---
        Place ynov = Place.builder().name("Ynov Lyon").categories(List.of("√âcole", "Amis")).build();
        Place clubVH = Place.builder().name("Club Victor Hugo").categories(List.of("Sport")).build();
        Place d4care = Place.builder().name("D4Care").categories(List.of("Travail")).build();
        Place avenir = Place.builder().name("Avenir Multimedia").categories(List.of("Travail")).build();
        Place icof = Place.builder().name("ICOF Lyon").categories(List.of("√âcole")).build();
        Place ort = Place.builder().name("ORT Lyon").categories(List.of("√âcole")).build();
        Place maisonFamille = Place.builder().name("Maison de Famille").categories(List.of("Famille")).build();

        placeRepository.saveAll(List.of(ynov, clubVH, d4care, avenir, icof, ort, maisonFamille));

        // --- PERSONNES ---
        Person me = Person.builder()
                .id(meId)
                .firstName("Pierre").lastName("Pocheron").nickname("Pedro")
                .email("pierre@example.com").phoneNumber("+33612345678")
                .job("D√©veloppeur Fullstack").company("Pedro Corp")
                .places(List.of(ynov, d4care, clubVH))
                .build();

        Person alice = createPerson("Alice", "Durand", "Ali", "alice@example.com");
        alice.setPlaces(List.of(ynov, clubVH, maisonFamille));

        Person bob = createPerson("Bob", "Martin", "Bobby", "bob@example.com");
        bob.setPlaces(List.of(clubVH, avenir));

        Person clara = createPerson("Clara", "Lemoine", "Cla", "clara@example.com");
        clara.setPlaces(List.of(ynov, icof));

        Person david = createPerson("David", "Bernard", "Dada", "david@example.com");
        david.setPlaces(List.of(ynov, ort, clubVH));

        Person emma = createPerson("Emma", "Morel", "Em", "emma@example.com");
        emma.setPlaces(List.of(ort, maisonFamille));

        Person farid = createPerson("Farid", "Amrani", "Far", "farid@example.com");
        farid.setPlaces(List.of(d4care, clubVH));

        // --- √âV√âNEMENTS ---
        Event resto = createEvent("Soir√©e Resto", "restaurant", "Lyon", LocalDate.now().minusDays(15), LocalDate.now().minusDays(15));
        Event trip = createEvent("Week-end √† Annecy", "voyage", "Annecy", LocalDate.now().minusDays(30), LocalDate.now().minusDays(28));
        Event ap√©ro = createEvent("Ap√©ro du Vendredi", "soir√©e", "Chez Pedro", LocalDate.now().minusDays(7), LocalDate.now().minusDays(7));
        Event sport = createEvent("S√©ance de muscu", "sport", "Club Victor Hugo", LocalDate.now().minusDays(2), LocalDate.now().minusDays(2));
        Event alumni = createEvent("Retrouvailles ICOF", "rencontre", "ICOF", LocalDate.now().minusDays(60), LocalDate.now().minusDays(60));

        // --- PARTICIPATIONS ---
        me.setParticipations(List.of(
                buildParticipation(resto, "organisateur", 8, "Super soir√©e"),
                buildParticipation(trip, "organisateur", 9, "Trop styl√©"),
                buildParticipation(ap√©ro, "organisateur", 7, "Ambiance chill"),
                buildParticipation(sport, "coach", 10, "Grosse perf")
        ));

        alice.setParticipations(List.of(
                buildParticipation(resto, "invit√©e", 7, "Sympa"),
                buildParticipation(ap√©ro, "invit√©e", 8, "Bonne vibes"),
                buildParticipation(sport, "partenaire", 9, "Squat PR !")
        ));

        bob.setParticipations(List.of(
                buildParticipation(trip, "invit√©", 9, "Magnifique"),
                buildParticipation(ap√©ro, "invit√©", 6, "Trop fatigu√©"),
                buildParticipation(sport, "partenaire", 7, "Pas mal")
        ));

        clara.setParticipations(List.of(
                buildParticipation(resto, "invit√©e", 8, "Excellente bouffe"),
                buildParticipation(trip, "invit√©e", 9, "J‚Äôai kiff√©"),
                buildParticipation(alumni, "organisatrice", 9, "Trop d‚Äô√©motion")
        ));

        david.setParticipations(List.of(
                buildParticipation(sport, "partenaire", 10, "Monstre üí™")
        ));

        emma.setParticipations(List.of(
                buildParticipation(alumni, "invit√©e", 8, "Que de souvenirs")
        ));

        farid.setParticipations(List.of(
                buildParticipation(sport, "coach√©", 8, "Progr√®s visibles !")
        ));

        // --- RELATIONS (exemples simples) ---
        me.setRelations(List.of(
                buildRelation(me, alice, "amie", "Coll√®ge", LocalDate.of(2010, 9, 1)),
                buildRelation(me, bob, "ami", "Soir√©e Dev", LocalDate.of(2022, 1, 20)),
                buildRelation(me, clara, "ancienne coll√®gue", "Travail", LocalDate.of(2018, 5, 10)),
                buildRelation(me, david, "pote de la salle", "Muscu", LocalDate.of(2023, 2, 1)),
                buildRelation(me, farid, "coll√®gue", "D4Care", LocalDate.of(2021, 9, 15))
        ));

        // --- ENREGISTREMENTS ---
        personRepository.saveAll(List.of(me, alice, bob, clara, david, emma, farid));
    }


    private Person createPerson(String firstName, String lastName, String nickname, String email) {
        return Person.builder()
                .id(UUID.randomUUID())
                .firstName(firstName)
                .lastName(lastName)
                .nickname(nickname)
                .email(email)
                .build();
    }

    private Event createEvent(String title, String type, String location, LocalDate start, LocalDate end) {
        return Event.builder()
                .id(UUID.randomUUID())
                .title(title)
                .type(type)
                .location(location)
                .startDate(start)
                .endDate(end)
                .build();
    }

    private Participation buildParticipation(Event event, String role, int note, String comment) {
        return Participation.builder()
                .event(event)
                .role(role)
                .note(note)
                .comment(comment)
                .joinedAt(LocalDate.now())
                .build();
    }

    private Relation buildRelation(Person source, Person target, String type, String context, LocalDate since) {
        return Relation.builder()
                .target(target)
                .type(type)
                .context(context)
                .since(since)
                .build();
    }
}
